// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.bitkitcore;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_bitkitcore_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_bitkitcore_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "bitkitcore"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
























































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "bitkitcore")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
        
    }

    fun uniffi_bitkitcore_fn_func_add_tags(`activityId`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_decode(`invoice`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_delete_activity_by_id(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_bitkitcore_fn_func_get_activities(`filter`: RustBuffer.ByValue,`txType`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,`search`: RustBuffer.ByValue,`minDate`: RustBuffer.ByValue,`maxDate`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,`sortDirection`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_activities_by_tag(`tag`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,`sortDirection`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_activity_by_id(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_all_unique_tags(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_lnurl_invoice(`address`: RustBuffer.ByValue,`amountSatoshis`: Long,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_tags(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_init_db(`basePath`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_insert_activity(`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_remove_tags(`activityId`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_update_activity(`activityId`: RustBuffer.ByValue,`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_upsert_activity(`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_validate_bitcoin_address(`address`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_bitkitcore_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bitkitcore_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bitkitcore_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bitkitcore_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bitkitcore_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bitkitcore_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bitkitcore_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bitkitcore_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bitkitcore_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_bitkitcore_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_bitkitcore_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_bitkitcore_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_checksum_func_add_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_decode(
    ): Short
    fun uniffi_bitkitcore_checksum_func_delete_activity_by_id(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activities(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activities_by_tag(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activity_by_id(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_all_unique_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_lnurl_invoice(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_init_db(
    ): Short
    fun uniffi_bitkitcore_checksum_func_insert_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_remove_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_update_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_upsert_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_validate_bitcoin_address(
    ): Short
    fun ffi_bitkitcore_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_bitkitcore_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_bitkitcore_checksum_func_add_tags() != 63739.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_decode() != 28437.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_delete_activity_by_id() != 29867.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activities() != 21347.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activities_by_tag() != 52823.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activity_by_id() != 44227.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_all_unique_tags() != 25431.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 5475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_tags() != 11308.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_init_db() != 9643.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_insert_activity() != 1510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_remove_tags() != 58873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_update_activity() != 42510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_upsert_activity() != 32175.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 56003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}



data class LightningActivity (
    var `id`: kotlin.String, 
    var `txType`: PaymentType, 
    var `status`: PaymentState, 
    var `value`: kotlin.ULong, 
    var `fee`: kotlin.ULong?, 
    var `invoice`: kotlin.String, 
    var `message`: kotlin.String, 
    var `timestamp`: kotlin.ULong, 
    var `preimage`: kotlin.String?, 
    var `createdAt`: kotlin.ULong?, 
    var `updatedAt`: kotlin.ULong?
) {
    
    companion object
}

public object FfiConverterTypeLightningActivity: FfiConverterRustBuffer<LightningActivity> {
    override fun read(buf: ByteBuffer): LightningActivity {
        return LightningActivity(
            FfiConverterString.read(buf),
            FfiConverterTypePaymentType.read(buf),
            FfiConverterTypePaymentState.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: LightningActivity) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypePaymentType.allocationSize(value.`txType`) +
            FfiConverterTypePaymentState.allocationSize(value.`status`) +
            FfiConverterULong.allocationSize(value.`value`) +
            FfiConverterOptionalULong.allocationSize(value.`fee`) +
            FfiConverterString.allocationSize(value.`invoice`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterOptionalString.allocationSize(value.`preimage`) +
            FfiConverterOptionalULong.allocationSize(value.`createdAt`) +
            FfiConverterOptionalULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: LightningActivity, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypePaymentType.write(value.`txType`, buf)
            FfiConverterTypePaymentState.write(value.`status`, buf)
            FfiConverterULong.write(value.`value`, buf)
            FfiConverterOptionalULong.write(value.`fee`, buf)
            FfiConverterString.write(value.`invoice`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterOptionalString.write(value.`preimage`, buf)
            FfiConverterOptionalULong.write(value.`createdAt`, buf)
            FfiConverterOptionalULong.write(value.`updatedAt`, buf)
    }
}



data class LightningInvoice (
    var `bolt11`: kotlin.String, 
    var `paymentHash`: kotlin.ByteArray, 
    var `amountSatoshis`: kotlin.ULong, 
    var `timestampSeconds`: kotlin.ULong, 
    var `expirySeconds`: kotlin.ULong, 
    var `isExpired`: kotlin.Boolean, 
    var `description`: kotlin.String?, 
    var `networkType`: NetworkType, 
    var `payeeNodeId`: kotlin.ByteArray?
) {
    
    companion object
}

public object FfiConverterTypeLightningInvoice: FfiConverterRustBuffer<LightningInvoice> {
    override fun read(buf: ByteBuffer): LightningInvoice {
        return LightningInvoice(
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeNetworkType.read(buf),
            FfiConverterOptionalByteArray.read(buf),
        )
    }

    override fun allocationSize(value: LightningInvoice) = (
            FfiConverterString.allocationSize(value.`bolt11`) +
            FfiConverterByteArray.allocationSize(value.`paymentHash`) +
            FfiConverterULong.allocationSize(value.`amountSatoshis`) +
            FfiConverterULong.allocationSize(value.`timestampSeconds`) +
            FfiConverterULong.allocationSize(value.`expirySeconds`) +
            FfiConverterBoolean.allocationSize(value.`isExpired`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterTypeNetworkType.allocationSize(value.`networkType`) +
            FfiConverterOptionalByteArray.allocationSize(value.`payeeNodeId`)
    )

    override fun write(value: LightningInvoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`bolt11`, buf)
            FfiConverterByteArray.write(value.`paymentHash`, buf)
            FfiConverterULong.write(value.`amountSatoshis`, buf)
            FfiConverterULong.write(value.`timestampSeconds`, buf)
            FfiConverterULong.write(value.`expirySeconds`, buf)
            FfiConverterBoolean.write(value.`isExpired`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterTypeNetworkType.write(value.`networkType`, buf)
            FfiConverterOptionalByteArray.write(value.`payeeNodeId`, buf)
    }
}



data class LnurlAddressData (
    var `uri`: kotlin.String, 
    var `domain`: kotlin.String, 
    var `username`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlAddressData: FfiConverterRustBuffer<LnurlAddressData> {
    override fun read(buf: ByteBuffer): LnurlAddressData {
        return LnurlAddressData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlAddressData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterString.allocationSize(value.`username`)
    )

    override fun write(value: LnurlAddressData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterString.write(value.`username`, buf)
    }
}



data class LnurlAuthData (
    var `uri`: kotlin.String, 
    var `tag`: kotlin.String, 
    var `k1`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlAuthData: FfiConverterRustBuffer<LnurlAuthData> {
    override fun read(buf: ByteBuffer): LnurlAuthData {
        return LnurlAuthData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlAuthData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`tag`) +
            FfiConverterString.allocationSize(value.`k1`)
    )

    override fun write(value: LnurlAuthData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`tag`, buf)
            FfiConverterString.write(value.`k1`, buf)
    }
}



data class LnurlChannelData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `k1`: kotlin.String, 
    var `tag`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlChannelData: FfiConverterRustBuffer<LnurlChannelData> {
    override fun read(buf: ByteBuffer): LnurlChannelData {
        return LnurlChannelData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlChannelData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`tag`)
    )

    override fun write(value: LnurlChannelData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`tag`, buf)
    }
}



data class LnurlPayData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `minSendable`: kotlin.ULong, 
    var `maxSendable`: kotlin.ULong, 
    var `metadataStr`: kotlin.String, 
    var `commentAllowed`: kotlin.UInt?, 
    var `allowsNostr`: kotlin.Boolean, 
    var `nostrPubkey`: kotlin.ByteArray?
) {
    
    companion object
}

public object FfiConverterTypeLnurlPayData: FfiConverterRustBuffer<LnurlPayData> {
    override fun read(buf: ByteBuffer): LnurlPayData {
        return LnurlPayData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalByteArray.read(buf),
        )
    }

    override fun allocationSize(value: LnurlPayData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterULong.allocationSize(value.`minSendable`) +
            FfiConverterULong.allocationSize(value.`maxSendable`) +
            FfiConverterString.allocationSize(value.`metadataStr`) +
            FfiConverterOptionalUInt.allocationSize(value.`commentAllowed`) +
            FfiConverterBoolean.allocationSize(value.`allowsNostr`) +
            FfiConverterOptionalByteArray.allocationSize(value.`nostrPubkey`)
    )

    override fun write(value: LnurlPayData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterULong.write(value.`minSendable`, buf)
            FfiConverterULong.write(value.`maxSendable`, buf)
            FfiConverterString.write(value.`metadataStr`, buf)
            FfiConverterOptionalUInt.write(value.`commentAllowed`, buf)
            FfiConverterBoolean.write(value.`allowsNostr`, buf)
            FfiConverterOptionalByteArray.write(value.`nostrPubkey`, buf)
    }
}



data class LnurlWithdrawData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `k1`: kotlin.String, 
    var `defaultDescription`: kotlin.String, 
    var `minWithdrawable`: kotlin.ULong?, 
    var `maxWithdrawable`: kotlin.ULong, 
    var `tag`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlWithdrawData: FfiConverterRustBuffer<LnurlWithdrawData> {
    override fun read(buf: ByteBuffer): LnurlWithdrawData {
        return LnurlWithdrawData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlWithdrawData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`defaultDescription`) +
            FfiConverterOptionalULong.allocationSize(value.`minWithdrawable`) +
            FfiConverterULong.allocationSize(value.`maxWithdrawable`) +
            FfiConverterString.allocationSize(value.`tag`)
    )

    override fun write(value: LnurlWithdrawData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`defaultDescription`, buf)
            FfiConverterOptionalULong.write(value.`minWithdrawable`, buf)
            FfiConverterULong.write(value.`maxWithdrawable`, buf)
            FfiConverterString.write(value.`tag`, buf)
    }
}



data class OnChainInvoice (
    var `address`: kotlin.String, 
    var `amountSatoshis`: kotlin.ULong, 
    var `label`: kotlin.String?, 
    var `message`: kotlin.String?, 
    var `params`: Map<kotlin.String, kotlin.String>?
) {
    
    companion object
}

public object FfiConverterTypeOnChainInvoice: FfiConverterRustBuffer<OnChainInvoice> {
    override fun read(buf: ByteBuffer): OnChainInvoice {
        return OnChainInvoice(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
        )
    }

    override fun allocationSize(value: OnChainInvoice) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterULong.allocationSize(value.`amountSatoshis`) +
            FfiConverterOptionalString.allocationSize(value.`label`) +
            FfiConverterOptionalString.allocationSize(value.`message`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`params`)
    )

    override fun write(value: OnChainInvoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterULong.write(value.`amountSatoshis`, buf)
            FfiConverterOptionalString.write(value.`label`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
            FfiConverterOptionalMapStringString.write(value.`params`, buf)
    }
}



data class OnchainActivity (
    var `id`: kotlin.String, 
    var `txType`: PaymentType, 
    var `txId`: kotlin.String, 
    var `value`: kotlin.ULong, 
    var `fee`: kotlin.ULong, 
    var `feeRate`: kotlin.ULong, 
    var `address`: kotlin.String, 
    var `confirmed`: kotlin.Boolean, 
    var `timestamp`: kotlin.ULong, 
    var `isBoosted`: kotlin.Boolean, 
    var `isTransfer`: kotlin.Boolean, 
    var `doesExist`: kotlin.Boolean, 
    var `confirmTimestamp`: kotlin.ULong?, 
    var `channelId`: kotlin.String?, 
    var `transferTxId`: kotlin.String?, 
    var `createdAt`: kotlin.ULong?, 
    var `updatedAt`: kotlin.ULong?
) {
    
    companion object
}

public object FfiConverterTypeOnchainActivity: FfiConverterRustBuffer<OnchainActivity> {
    override fun read(buf: ByteBuffer): OnchainActivity {
        return OnchainActivity(
            FfiConverterString.read(buf),
            FfiConverterTypePaymentType.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: OnchainActivity) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypePaymentType.allocationSize(value.`txType`) +
            FfiConverterString.allocationSize(value.`txId`) +
            FfiConverterULong.allocationSize(value.`value`) +
            FfiConverterULong.allocationSize(value.`fee`) +
            FfiConverterULong.allocationSize(value.`feeRate`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterBoolean.allocationSize(value.`confirmed`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterBoolean.allocationSize(value.`isBoosted`) +
            FfiConverterBoolean.allocationSize(value.`isTransfer`) +
            FfiConverterBoolean.allocationSize(value.`doesExist`) +
            FfiConverterOptionalULong.allocationSize(value.`confirmTimestamp`) +
            FfiConverterOptionalString.allocationSize(value.`channelId`) +
            FfiConverterOptionalString.allocationSize(value.`transferTxId`) +
            FfiConverterOptionalULong.allocationSize(value.`createdAt`) +
            FfiConverterOptionalULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: OnchainActivity, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypePaymentType.write(value.`txType`, buf)
            FfiConverterString.write(value.`txId`, buf)
            FfiConverterULong.write(value.`value`, buf)
            FfiConverterULong.write(value.`fee`, buf)
            FfiConverterULong.write(value.`feeRate`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterBoolean.write(value.`confirmed`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterBoolean.write(value.`isBoosted`, buf)
            FfiConverterBoolean.write(value.`isTransfer`, buf)
            FfiConverterBoolean.write(value.`doesExist`, buf)
            FfiConverterOptionalULong.write(value.`confirmTimestamp`, buf)
            FfiConverterOptionalString.write(value.`channelId`, buf)
            FfiConverterOptionalString.write(value.`transferTxId`, buf)
            FfiConverterOptionalULong.write(value.`createdAt`, buf)
            FfiConverterOptionalULong.write(value.`updatedAt`, buf)
    }
}



data class PubkyAuth (
    var `data`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypePubkyAuth: FfiConverterRustBuffer<PubkyAuth> {
    override fun read(buf: ByteBuffer): PubkyAuth {
        return PubkyAuth(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PubkyAuth) = (
            FfiConverterString.allocationSize(value.`data`)
    )

    override fun write(value: PubkyAuth, buf: ByteBuffer) {
            FfiConverterString.write(value.`data`, buf)
    }
}



data class ValidationResult (
    var `address`: kotlin.String, 
    var `network`: NetworkType, 
    var `addressType`: AddressType
) {
    
    companion object
}

public object FfiConverterTypeValidationResult: FfiConverterRustBuffer<ValidationResult> {
    override fun read(buf: ByteBuffer): ValidationResult {
        return ValidationResult(
            FfiConverterString.read(buf),
            FfiConverterTypeNetworkType.read(buf),
            FfiConverterTypeAddressType.read(buf),
        )
    }

    override fun allocationSize(value: ValidationResult) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeNetworkType.allocationSize(value.`network`) +
            FfiConverterTypeAddressType.allocationSize(value.`addressType`)
    )

    override fun write(value: ValidationResult, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeNetworkType.write(value.`network`, buf)
            FfiConverterTypeAddressType.write(value.`addressType`, buf)
    }
}



sealed class Activity {
    
    data class Onchain(
        val v1: OnchainActivity) : Activity() {
        companion object
    }
    
    data class Lightning(
        val v1: LightningActivity) : Activity() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeActivity : FfiConverterRustBuffer<Activity>{
    override fun read(buf: ByteBuffer): Activity {
        return when(buf.getInt()) {
            1 -> Activity.Onchain(
                FfiConverterTypeOnchainActivity.read(buf),
                )
            2 -> Activity.Lightning(
                FfiConverterTypeLightningActivity.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Activity) = when(value) {
        is Activity.Onchain -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeOnchainActivity.allocationSize(value.v1)
            )
        }
        is Activity.Lightning -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLightningActivity.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: Activity, buf: ByteBuffer) {
        when(value) {
            is Activity.Onchain -> {
                buf.putInt(1)
                FfiConverterTypeOnchainActivity.write(value.v1, buf)
                Unit
            }
            is Activity.Lightning -> {
                buf.putInt(2)
                FfiConverterTypeLightningActivity.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class ActivityException: Exception() {
    
    class InvalidActivity(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InitializationException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InsertException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class RetrievalException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class DataException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class ConnectionException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class SerializationException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ActivityException> {
        override fun lift(error_buf: RustBuffer.ByValue): ActivityException = FfiConverterTypeActivityError.lift(error_buf)
    }

    
}

public object FfiConverterTypeActivityError : FfiConverterRustBuffer<ActivityException> {
    override fun read(buf: ByteBuffer): ActivityException {
        

        return when(buf.getInt()) {
            1 -> ActivityException.InvalidActivity(
                FfiConverterString.read(buf),
                )
            2 -> ActivityException.InitializationException(
                FfiConverterString.read(buf),
                )
            3 -> ActivityException.InsertException(
                FfiConverterString.read(buf),
                )
            4 -> ActivityException.RetrievalException(
                FfiConverterString.read(buf),
                )
            5 -> ActivityException.DataException(
                FfiConverterString.read(buf),
                )
            6 -> ActivityException.ConnectionException(
                FfiConverterString.read(buf),
                )
            7 -> ActivityException.SerializationException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ActivityException): ULong {
        return when(value) {
            is ActivityException.InvalidActivity -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.InitializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.InsertException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.RetrievalException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.DataException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.ConnectionException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.SerializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: ActivityException, buf: ByteBuffer) {
        when(value) {
            is ActivityException.InvalidActivity -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.InitializationException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.InsertException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.RetrievalException -> {
                buf.putInt(4)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.DataException -> {
                buf.putInt(5)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.ConnectionException -> {
                buf.putInt(6)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.SerializationException -> {
                buf.putInt(7)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class ActivityFilter {
    
    ALL,
    LIGHTNING,
    ONCHAIN;
    companion object
}


public object FfiConverterTypeActivityFilter: FfiConverterRustBuffer<ActivityFilter> {
    override fun read(buf: ByteBuffer) = try {
        ActivityFilter.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ActivityFilter) = 4UL

    override fun write(value: ActivityFilter, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ActivityType {
    
    ONCHAIN,
    LIGHTNING;
    companion object
}


public object FfiConverterTypeActivityType: FfiConverterRustBuffer<ActivityType> {
    override fun read(buf: ByteBuffer) = try {
        ActivityType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ActivityType) = 4UL

    override fun write(value: ActivityType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class AddressException: Exception() {
    
    class InvalidAddress(
        ) : AddressException() {
        override val message
            get() = ""
    }
    
    class InvalidNetwork(
        ) : AddressException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<AddressException> {
        override fun lift(error_buf: RustBuffer.ByValue): AddressException = FfiConverterTypeAddressError.lift(error_buf)
    }

    
}

public object FfiConverterTypeAddressError : FfiConverterRustBuffer<AddressException> {
    override fun read(buf: ByteBuffer): AddressException {
        

        return when(buf.getInt()) {
            1 -> AddressException.InvalidAddress()
            2 -> AddressException.InvalidNetwork()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: AddressException): ULong {
        return when(value) {
            is AddressException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is AddressException.InvalidNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: AddressException, buf: ByteBuffer) {
        when(value) {
            is AddressException.InvalidAddress -> {
                buf.putInt(1)
                Unit
            }
            is AddressException.InvalidNetwork -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class AddressType {
    
    P2PKH,
    P2SH,
    P2WPKH,
    P2WSH,
    P2TR,
    UNKNOWN;
    companion object
}


public object FfiConverterTypeAddressType: FfiConverterRustBuffer<AddressType> {
    override fun read(buf: ByteBuffer) = try {
        AddressType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AddressType) = 4UL

    override fun write(value: AddressType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class DbException: Exception() {
    
    class DbActivityException(
        
        val `errorDetails`: ActivityException
        ) : DbException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InitializationException(
        
        val `errorDetails`: kotlin.String
        ) : DbException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DbException> {
        override fun lift(error_buf: RustBuffer.ByValue): DbException = FfiConverterTypeDbError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDbError : FfiConverterRustBuffer<DbException> {
    override fun read(buf: ByteBuffer): DbException {
        

        return when(buf.getInt()) {
            1 -> DbException.DbActivityException(
                FfiConverterTypeActivityError.read(buf),
                )
            2 -> DbException.InitializationException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DbException): ULong {
        return when(value) {
            is DbException.DbActivityException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeActivityError.allocationSize(value.`errorDetails`)
            )
            is DbException.InitializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: DbException, buf: ByteBuffer) {
        when(value) {
            is DbException.DbActivityException -> {
                buf.putInt(1)
                FfiConverterTypeActivityError.write(value.`errorDetails`, buf)
                Unit
            }
            is DbException.InitializationException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DecodingException: Exception() {
    
    class InvalidFormat(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidNetwork(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidAmount(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidLnurlPayAmount(
        
        val `amountSatoshis`: kotlin.ULong, 
        
        val `min`: kotlin.ULong, 
        
        val `max`: kotlin.ULong
        ) : DecodingException() {
        override val message
            get() = "amountSatoshis=${ `amountSatoshis` }, min=${ `min` }, max=${ `max` }"
    }
    
    class InvalidTimestamp(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidChecksum(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidResponse(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class UnsupportedType(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidAddress(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class RequestFailed(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class ClientCreationFailed(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvoiceCreationFailed(
        
        val `errorMessage`: kotlin.String
        ) : DecodingException() {
        override val message
            get() = "errorMessage=${ `errorMessage` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DecodingException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodingException = FfiConverterTypeDecodingError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDecodingError : FfiConverterRustBuffer<DecodingException> {
    override fun read(buf: ByteBuffer): DecodingException {
        

        return when(buf.getInt()) {
            1 -> DecodingException.InvalidFormat()
            2 -> DecodingException.InvalidNetwork()
            3 -> DecodingException.InvalidAmount()
            4 -> DecodingException.InvalidLnurlPayAmount(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            5 -> DecodingException.InvalidTimestamp()
            6 -> DecodingException.InvalidChecksum()
            7 -> DecodingException.InvalidResponse()
            8 -> DecodingException.UnsupportedType()
            9 -> DecodingException.InvalidAddress()
            10 -> DecodingException.RequestFailed()
            11 -> DecodingException.ClientCreationFailed()
            12 -> DecodingException.InvoiceCreationFailed(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DecodingException): ULong {
        return when(value) {
            is DecodingException.InvalidFormat -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidLnurlPayAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterULong.allocationSize(value.`amountSatoshis`)
                + FfiConverterULong.allocationSize(value.`min`)
                + FfiConverterULong.allocationSize(value.`max`)
            )
            is DecodingException.InvalidTimestamp -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidChecksum -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidResponse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.UnsupportedType -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.RequestFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.ClientCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvoiceCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorMessage`)
            )
        }
    }

    override fun write(value: DecodingException, buf: ByteBuffer) {
        when(value) {
            is DecodingException.InvalidFormat -> {
                buf.putInt(1)
                Unit
            }
            is DecodingException.InvalidNetwork -> {
                buf.putInt(2)
                Unit
            }
            is DecodingException.InvalidAmount -> {
                buf.putInt(3)
                Unit
            }
            is DecodingException.InvalidLnurlPayAmount -> {
                buf.putInt(4)
                FfiConverterULong.write(value.`amountSatoshis`, buf)
                FfiConverterULong.write(value.`min`, buf)
                FfiConverterULong.write(value.`max`, buf)
                Unit
            }
            is DecodingException.InvalidTimestamp -> {
                buf.putInt(5)
                Unit
            }
            is DecodingException.InvalidChecksum -> {
                buf.putInt(6)
                Unit
            }
            is DecodingException.InvalidResponse -> {
                buf.putInt(7)
                Unit
            }
            is DecodingException.UnsupportedType -> {
                buf.putInt(8)
                Unit
            }
            is DecodingException.InvalidAddress -> {
                buf.putInt(9)
                Unit
            }
            is DecodingException.RequestFailed -> {
                buf.putInt(10)
                Unit
            }
            is DecodingException.ClientCreationFailed -> {
                buf.putInt(11)
                Unit
            }
            is DecodingException.InvoiceCreationFailed -> {
                buf.putInt(12)
                FfiConverterString.write(value.`errorMessage`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class LnurlException: Exception() {
    
    class InvalidAddress(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class ClientCreationFailed(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class RequestFailed(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class InvalidResponse(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class InvalidAmount(
        
        val `amountSatoshis`: kotlin.ULong, 
        
        val `min`: kotlin.ULong, 
        
        val `max`: kotlin.ULong
        ) : LnurlException() {
        override val message
            get() = "amountSatoshis=${ `amountSatoshis` }, min=${ `min` }, max=${ `max` }"
    }
    
    class InvoiceCreationFailed(
        
        val `errorDetails`: kotlin.String
        ) : LnurlException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LnurlException> {
        override fun lift(error_buf: RustBuffer.ByValue): LnurlException = FfiConverterTypeLnurlError.lift(error_buf)
    }

    
}

public object FfiConverterTypeLnurlError : FfiConverterRustBuffer<LnurlException> {
    override fun read(buf: ByteBuffer): LnurlException {
        

        return when(buf.getInt()) {
            1 -> LnurlException.InvalidAddress()
            2 -> LnurlException.ClientCreationFailed()
            3 -> LnurlException.RequestFailed()
            4 -> LnurlException.InvalidResponse()
            5 -> LnurlException.InvalidAmount(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            6 -> LnurlException.InvoiceCreationFailed(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnurlException): ULong {
        return when(value) {
            is LnurlException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.ClientCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.RequestFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.InvalidResponse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.InvalidAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterULong.allocationSize(value.`amountSatoshis`)
                + FfiConverterULong.allocationSize(value.`min`)
                + FfiConverterULong.allocationSize(value.`max`)
            )
            is LnurlException.InvoiceCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: LnurlException, buf: ByteBuffer) {
        when(value) {
            is LnurlException.InvalidAddress -> {
                buf.putInt(1)
                Unit
            }
            is LnurlException.ClientCreationFailed -> {
                buf.putInt(2)
                Unit
            }
            is LnurlException.RequestFailed -> {
                buf.putInt(3)
                Unit
            }
            is LnurlException.InvalidResponse -> {
                buf.putInt(4)
                Unit
            }
            is LnurlException.InvalidAmount -> {
                buf.putInt(5)
                FfiConverterULong.write(value.`amountSatoshis`, buf)
                FfiConverterULong.write(value.`min`, buf)
                FfiConverterULong.write(value.`max`, buf)
                Unit
            }
            is LnurlException.InvoiceCreationFailed -> {
                buf.putInt(6)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class NetworkType {
    
    BITCOIN,
    TESTNET,
    REGTEST,
    SIGNET;
    companion object
}


public object FfiConverterTypeNetworkType: FfiConverterRustBuffer<NetworkType> {
    override fun read(buf: ByteBuffer) = try {
        NetworkType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: NetworkType) = 4UL

    override fun write(value: NetworkType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaymentState {
    
    PENDING,
    SUCCEEDED,
    FAILED;
    companion object
}


public object FfiConverterTypePaymentState: FfiConverterRustBuffer<PaymentState> {
    override fun read(buf: ByteBuffer) = try {
        PaymentState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentState) = 4UL

    override fun write(value: PaymentState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaymentType {
    
    SENT,
    RECEIVED;
    companion object
}


public object FfiConverterTypePaymentType: FfiConverterRustBuffer<PaymentType> {
    override fun read(buf: ByteBuffer) = try {
        PaymentType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentType) = 4UL

    override fun write(value: PaymentType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Scanner {
    
    data class OnChain(
        val `invoice`: OnChainInvoice) : Scanner() {
        companion object
    }
    
    data class Lightning(
        val `invoice`: LightningInvoice) : Scanner() {
        companion object
    }
    
    data class PubkyAuth(
        val `data`: kotlin.String) : Scanner() {
        companion object
    }
    
    data class LnurlChannel(
        val `data`: LnurlChannelData) : Scanner() {
        companion object
    }
    
    data class LnurlAuth(
        val `data`: LnurlAuthData) : Scanner() {
        companion object
    }
    
    data class LnurlWithdraw(
        val `data`: LnurlWithdrawData) : Scanner() {
        companion object
    }
    
    data class LnurlAddress(
        val `data`: LnurlAddressData) : Scanner() {
        companion object
    }
    
    data class LnurlPay(
        val `data`: LnurlPayData) : Scanner() {
        companion object
    }
    
    data class NodeId(
        val `url`: kotlin.String, 
        val `network`: NetworkType) : Scanner() {
        companion object
    }
    
    data class TreasureHunt(
        val `chestId`: kotlin.String) : Scanner() {
        companion object
    }
    
    data class OrangeTicket(
        val `ticketId`: kotlin.String) : Scanner() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeScanner : FfiConverterRustBuffer<Scanner>{
    override fun read(buf: ByteBuffer): Scanner {
        return when(buf.getInt()) {
            1 -> Scanner.OnChain(
                FfiConverterTypeOnChainInvoice.read(buf),
                )
            2 -> Scanner.Lightning(
                FfiConverterTypeLightningInvoice.read(buf),
                )
            3 -> Scanner.PubkyAuth(
                FfiConverterString.read(buf),
                )
            4 -> Scanner.LnurlChannel(
                FfiConverterTypeLnurlChannelData.read(buf),
                )
            5 -> Scanner.LnurlAuth(
                FfiConverterTypeLnurlAuthData.read(buf),
                )
            6 -> Scanner.LnurlWithdraw(
                FfiConverterTypeLnurlWithdrawData.read(buf),
                )
            7 -> Scanner.LnurlAddress(
                FfiConverterTypeLnurlAddressData.read(buf),
                )
            8 -> Scanner.LnurlPay(
                FfiConverterTypeLnurlPayData.read(buf),
                )
            9 -> Scanner.NodeId(
                FfiConverterString.read(buf),
                FfiConverterTypeNetworkType.read(buf),
                )
            10 -> Scanner.TreasureHunt(
                FfiConverterString.read(buf),
                )
            11 -> Scanner.OrangeTicket(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Scanner) = when(value) {
        is Scanner.OnChain -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeOnChainInvoice.allocationSize(value.`invoice`)
            )
        }
        is Scanner.Lightning -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLightningInvoice.allocationSize(value.`invoice`)
            )
        }
        is Scanner.PubkyAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlChannel -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlChannelData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlAuthData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlWithdraw -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlWithdrawData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlAddressData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlPay -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlPayData.allocationSize(value.`data`)
            )
        }
        is Scanner.NodeId -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`url`)
                + FfiConverterTypeNetworkType.allocationSize(value.`network`)
            )
        }
        is Scanner.TreasureHunt -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`chestId`)
            )
        }
        is Scanner.OrangeTicket -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`ticketId`)
            )
        }
    }

    override fun write(value: Scanner, buf: ByteBuffer) {
        when(value) {
            is Scanner.OnChain -> {
                buf.putInt(1)
                FfiConverterTypeOnChainInvoice.write(value.`invoice`, buf)
                Unit
            }
            is Scanner.Lightning -> {
                buf.putInt(2)
                FfiConverterTypeLightningInvoice.write(value.`invoice`, buf)
                Unit
            }
            is Scanner.PubkyAuth -> {
                buf.putInt(3)
                FfiConverterString.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlChannel -> {
                buf.putInt(4)
                FfiConverterTypeLnurlChannelData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlAuth -> {
                buf.putInt(5)
                FfiConverterTypeLnurlAuthData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlWithdraw -> {
                buf.putInt(6)
                FfiConverterTypeLnurlWithdrawData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlAddress -> {
                buf.putInt(7)
                FfiConverterTypeLnurlAddressData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlPay -> {
                buf.putInt(8)
                FfiConverterTypeLnurlPayData.write(value.`data`, buf)
                Unit
            }
            is Scanner.NodeId -> {
                buf.putInt(9)
                FfiConverterString.write(value.`url`, buf)
                FfiConverterTypeNetworkType.write(value.`network`, buf)
                Unit
            }
            is Scanner.TreasureHunt -> {
                buf.putInt(10)
                FfiConverterString.write(value.`chestId`, buf)
                Unit
            }
            is Scanner.OrangeTicket -> {
                buf.putInt(11)
                FfiConverterString.write(value.`ticketId`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class SortDirection {
    
    ASC,
    DESC;
    companion object
}


public object FfiConverterTypeSortDirection: FfiConverterRustBuffer<SortDirection> {
    override fun read(buf: ByteBuffer) = try {
        SortDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SortDirection) = 4UL

    override fun write(value: SortDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeActivity: FfiConverterRustBuffer<Activity?> {
    override fun read(buf: ByteBuffer): Activity? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeActivity.read(buf)
    }

    override fun allocationSize(value: Activity?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeActivity.allocationSize(value)
        }
    }

    override fun write(value: Activity?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeActivity.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeActivityFilter: FfiConverterRustBuffer<ActivityFilter?> {
    override fun read(buf: ByteBuffer): ActivityFilter? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeActivityFilter.read(buf)
    }

    override fun allocationSize(value: ActivityFilter?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeActivityFilter.allocationSize(value)
        }
    }

    override fun write(value: ActivityFilter?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeActivityFilter.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePaymentType: FfiConverterRustBuffer<PaymentType?> {
    override fun read(buf: ByteBuffer): PaymentType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePaymentType.read(buf)
    }

    override fun allocationSize(value: PaymentType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypePaymentType.allocationSize(value)
        }
    }

    override fun write(value: PaymentType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePaymentType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSortDirection: FfiConverterRustBuffer<SortDirection?> {
    override fun read(buf: ByteBuffer): SortDirection? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSortDirection.read(buf)
    }

    override fun allocationSize(value: SortDirection?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeSortDirection.allocationSize(value)
        }
    }

    override fun write(value: SortDirection?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSortDirection.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>?> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringString.read(buf)
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterMapStringString.allocationSize(value)
        }
    }

    override fun write(value: Map<kotlin.String, kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeActivity: FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Activity>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}








    @Throws(ActivityException::class) fun `addTags`(`activityId`: kotlin.String, `tags`: List<kotlin.String>)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_add_tags(
        FfiConverterString.lower(`activityId`),FfiConverterSequenceString.lower(`tags`),_status)
}
    
    

    @Throws(DecodingException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `decode`(`invoice`: kotlin.String) : Scanner {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_decode(FfiConverterString.lower(`invoice`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeScanner.lift(it) },
        // Error FFI converter
        DecodingException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `deleteActivityById`(`activityId`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_delete_activity_by_id(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivities`(`filter`: ActivityFilter?, `txType`: PaymentType?, `tags`: List<kotlin.String>?, `search`: kotlin.String?, `minDate`: kotlin.ULong?, `maxDate`: kotlin.ULong?, `limit`: kotlin.UInt?, `sortDirection`: SortDirection?): List<Activity> {
            return FfiConverterSequenceTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activities(
        FfiConverterOptionalTypeActivityFilter.lower(`filter`),FfiConverterOptionalTypePaymentType.lower(`txType`),FfiConverterOptionalSequenceString.lower(`tags`),FfiConverterOptionalString.lower(`search`),FfiConverterOptionalULong.lower(`minDate`),FfiConverterOptionalULong.lower(`maxDate`),FfiConverterOptionalUInt.lower(`limit`),FfiConverterOptionalTypeSortDirection.lower(`sortDirection`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivitiesByTag`(`tag`: kotlin.String, `limit`: kotlin.UInt?, `sortDirection`: SortDirection?): List<Activity> {
            return FfiConverterSequenceTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activities_by_tag(
        FfiConverterString.lower(`tag`),FfiConverterOptionalUInt.lower(`limit`),FfiConverterOptionalTypeSortDirection.lower(`sortDirection`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivityById`(`activityId`: kotlin.String): Activity? {
            return FfiConverterOptionalTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activity_by_id(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getAllUniqueTags`(): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_all_unique_tags(
        _status)
}
    )
    }
    

    @Throws(LnurlException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getLnurlInvoice`(`address`: kotlin.String, `amountSatoshis`: kotlin.ULong) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_lnurl_invoice(FfiConverterString.lower(`address`),FfiConverterULong.lower(`amountSatoshis`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LnurlException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `getTags`(`activityId`: kotlin.String): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_tags(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(DbException::class) fun `initDb`(`basePath`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(DbException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_init_db(
        FfiConverterString.lower(`basePath`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `insertActivity`(`activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_insert_activity(
        FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(ActivityException::class) fun `removeTags`(`activityId`: kotlin.String, `tags`: List<kotlin.String>)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_remove_tags(
        FfiConverterString.lower(`activityId`),FfiConverterSequenceString.lower(`tags`),_status)
}
    
    

    @Throws(ActivityException::class) fun `updateActivity`(`activityId`: kotlin.String, `activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_update_activity(
        FfiConverterString.lower(`activityId`),FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(ActivityException::class) fun `upsertActivity`(`activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_upsert_activity(
        FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(AddressException::class) fun `validateBitcoinAddress`(`address`: kotlin.String): ValidationResult {
            return FfiConverterTypeValidationResult.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_validate_bitcoin_address(
        FfiConverterString.lower(`address`),_status)
}
    )
    }
    


